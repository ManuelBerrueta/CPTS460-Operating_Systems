(1). Which of these will generate data_abort faults? WHY?
	Both, the "*p = (int *)(128*0x100000); *p = 123;" and "*p = (int *)(512*0x100000); *p = 123;" will generate data_abort faults. 
    This is because we have initialized only up to 127 (because is 0 indexed), therefore the 128*0x100000 is 1 over 
    and accessing memory area that is not allowed to. With the 512*0x100000 the situation is similar in that is trying 
    to access memory area that is not allowed to, but it is also beyond the memory capacity of the board. This board has
     only 256MB + the 2 MB I/O for  total of 258 MB, thus it is way out of bounds. 
	
For testing:                          int *p;
		printf("test MM at VA=2MB\n");
		p = (int *)(2*0x100000); *p = 123;
		
		printf("test MM at VA=127MB\n");
		p = (int *)(127*0x100000); *p = 123;
		
		printf("test MM at VA=128MB\n");
		*p = (int *)(128*0x100000); *p = 123;
		
		printf("test MM at VA=512MB\n");
		*p = (int *)(512*0x100000); *p = 123;

(2). When a data_abort fault occurs, the program displays some error messages.
     DRAW a diagram (with reason) to show the control flow of the CPU from
     where the fault occurred to where it shows the error messages.
	Using this program as reference the control flow is as follows:
     _______________________________________________________________________________________________________
    |                                                                                                       |
	| Program tries to access memory  ==========>  MMU Checks Access                                        |
	| 		                                       • The permission to access the memory area get's         |
    |                                                 checked by MMU's access control logic which           |
    |                                                 determines if access to that memory is permitted      |
	| 	 	                                       • If it doesn't have permission to access the memory,    |
    |                                                 the MMU catches it.                                   |
    | ----------------------------------------------------------------------------------------------------  |
	| MMU signals CPU to abort        ==========>  Vector Table to look up data_abort_handler_addr          |
    |   • CPU switches to privilege                 • LDR PC, Data_abort_handler_addr                       |
    |      mode to handle exception                                                                         |
    |         Reference Page 169		                                                                    |
    |       ○ Data abort mode                                                                               |
    |            per page 180                                                                               |
    | ----------------------------------------------------------------------------------------------------  |
	| Vector Table                    ==========>  data_abort_handler() C function                          |
    |   • data_abort_handler_addr	    	         ○ Reads MMU data fault register c5                     |
	| 		                                         ○ Getsprc() to get the read mode                       |
	| 		                                         ○ Check what mode the CPU was in                       |
	| 		                                         ○ In what virtual address it occurred                  |
	| 		                                         ○ What is the reason the fault occurred                |
    |                                                     ○ Fault address register c6                       |
    |  -----------------------------------------------------------------------------------------------------|
    |                                                                                                       |
	| data_abort_handler() C function  ==========>	Return to PC-4. This is the next instruction after      |
    |                                                the instruction that cause the exception.              |
    | ------------------------------------------------------------------------------------------------------|
	|                                                                                                       |
    | Program continues execution at PC-4		                                                            |
    |_______________________________________________________________________________________________________|
